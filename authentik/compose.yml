services:
  postgresql:

    container_name: authentik-postgres
    image: ${AUTHENTIK_DB_IMAGE}:${AUTHENTIK_DB_TAG}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    env_file:
      - ../ops/.env.local
      - ./app.env
    environment:
      POSTGRES_USER: ${AUTHENTIK_PG_USER}
      POSTGRES_DB: ${AUTHENTIK_PG_DB}
      POSTGRES_PASSWORD: ${AUTHENTIK_PG_PASS}
    volumes:
      - authentik_db:/var/lib/postgresql/data
    security_opt:
      - no-new-privileges:true

  redis:

    container_name: authentik-redis
    image: ${AUTHENTIK_REDIS_IMAGE}:${AUTHENTIK_REDIS_TAG}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik_redis:/data
    env_file:
      - ../ops/.env.local
      - ./app.env
    security_opt:
      - no-new-privileges:true

  server:
    container_name: authentik
    image: ${AUTHENTIK_IMAGE}:${AUTHENTIK_TAG}
    restart: unless-stopped
    command: server
    env_file:
      - ../ops/.env.local
      - ./app.env
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
    volumes:
      - ./media:/media:ro
      - ./custom-templates:/templates:ro
    read_only: true
    tmpfs: [/tmp]
    networks: [default, traefik]
    security_opt: [no-new-privileges:true]
    cap_drop: [ALL]
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.authentik.rule=Host(`${AUTHENTIK_HOST}`)
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.tls.certresolver=cloudflare
      - traefik.http.services.authentik.loadbalancer.server.port=9000
      - traefik.http.routers.authentik.middlewares=secure-headers@docker

  worker:
    container_name: authentik-worker
    image: ${AUTHENTIK_IMAGE}:${AUTHENTIK_TAG}
    restart: unless-stopped
    command: worker
    env_file:
      - ../ops/.env.local
      - ./app.env
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
    volumes:
      - ./media:/media:ro
      - ./custom-templates:/templates:ro
      - ./certs:/certs:ro
    read_only: true
    tmpfs: [/tmp]
    security_opt: [no-new-privileges:true]
    cap_drop: [ALL]

volumes:
  authentik_db:
  authentik_redis:

networks:
  traefik:
    external: true
